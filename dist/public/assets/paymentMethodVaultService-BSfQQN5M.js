const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-6CtNGf6q.js","assets/index-2NUpRxMy.css"])))=>i.map(i=>d[i]);
import{n as c,_ as r,v as n}from"./index-6CtNGf6q.js";const l="payments";function d(t){return t?c(t,l):""}async function p(t){if(!t)return console.error("Cannot initialize payment method vault without email"),!1;try{console.log(`Initializing payment method vault for ${t}...`);const{setVaultUserContext:o}=await r(async()=>{const{setVaultUserContext:a}=await import("./index-6CtNGf6q.js").then(i=>i.p);return{setVaultUserContext:a}},__vite__mapDeps([0,1]));o(t),console.log("Using standardized WASM-first approach with WebCrypto fallback for vault initialization");const{resetFallbackState:s}=await r(async()=>{const{resetFallbackState:a}=await import("./index-6CtNGf6q.js").then(i=>i.q);return{resetFallbackState:a}},__vite__mapDeps([0,1]));if(s(),n.isInitialized()||(console.log("Vault service not initialized, initializing now..."),await n.initialize()),!n.isUnlocked())return console.warn("Vault is locked! Cannot initialize payment method vault."),!1;const u=await n.getVaults(),e=d(t);return console.log(`Checking for payment method vault: ${e}`),u.some(a=>a.id===e)?(console.log(`Payment method vault already exists: ${e}`),!0):(console.log(`Creating payment method vault for ${t}...`),await n.createNewVault("Payment Methods",l,e),console.log("Using standardized WASM-first approach for vault operations"),console.log(`Payment method vault created: ${e} using standardized encryption`),!0)}catch(o){return console.error("Error initializing payment method vault:",o),!1}}export{l as PAYMENT_METHODS_VAULT_TYPE,d as getPaymentMethodVaultId,p as initializePaymentMethodVault};
