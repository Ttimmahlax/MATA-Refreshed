const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-6CtNGf6q.js","assets/index-2NUpRxMy.css"])))=>i.map(i=>d[i]);
import{_ as S}from"./index-6CtNGf6q.js";async function A(t){try{const l=(await S(async()=>{const{default:i}=await import("./index-6CtNGf6q.js").then(e=>e.j);return{default:i}},__vite__mapDeps([0,1]))).default,s=new l;let c=!1;s.file("README.txt",`MATA Keys Backup
Created: ${new Date().toLocaleString()}
${t?`User: ${t}`:""}

This zip file contains data from your MATA web application${t?` for user ${t}`:""}.
${t?"It includes both localStorage keys and IndexedDB data for complete restoration.":"It includes localStorage keys."}
To restore this data, please use the "Import Backup" feature in the MATA web application.
`);const f={},g={},p={},y={},b={},_={},r=t?t.toLowerCase().trim().replace(/[^a-zA-Z0-9]/g,"_"):void 0;console.log(`Creating backup${t?` for user ${t} (sanitized: ${r})`:" for all users"}`);for(let i=0;i<localStorage.length;i++){const e=localStorage.key(i);if(!e)continue;if(r){if(!(e===`mata_keys_${r}`||e===`mata_salt_${r}`||e.includes(`user_${r}`)||e.startsWith("mata_setting")||e==="mata_active_user"))continue}else if(!(e.startsWith("mata_")||e.includes("_vault_")||e.includes("keys_")||e.includes("_keys")||e.includes("masterKeys")||e.includes("salt_")))continue;let n;try{const o=localStorage.getItem(e);try{n=o?JSON.parse(o):null}catch{n=o}}catch(o){n=`[ERROR: ${o instanceof Error?o.message:String(o)}]`}e.includes("user_")||e.includes("keys_")||e.includes("salt_")?f[e]=n:e.includes("password")?g[e]=n:e.includes("contact")?p[e]=n:e.includes("bank")||e.includes("account")?y[e]=n:e.includes("setting")||e.includes("config")?b[e]=n:_[e]=n}if(s.file("all-keys.json",JSON.stringify({...f,passwordData:g,contactData:p,bankAccountData:y,settingsData:b,miscData:_},null,2)),Object.keys(f).length>0&&s.file("user-data.json",JSON.stringify(f,null,2)),Object.keys(g).length>0&&s.file("password-data.json",JSON.stringify(g,null,2)),Object.keys(p).length>0&&s.file("contact-data.json",JSON.stringify(p,null,2)),Object.keys(y).length>0&&s.file("bank-account-data.json",JSON.stringify(y,null,2)),Object.keys(b).length>0&&s.file("settings-data.json",JSON.stringify(b,null,2)),Object.keys(_).length>0&&s.file("misc-data.json",JSON.stringify(_,null,2)),t)try{const{isExtensionInstalled:i,sendMessageToExtension:e}=await S(async()=>{const{isExtensionInstalled:n,sendMessageToExtension:o}=await import("./index-6CtNGf6q.js").then(d=>d.o);return{isExtensionInstalled:n,sendMessageToExtension:o}},__vite__mapDeps([0,1]));if(i()){console.log(`Extension detected, requesting IndexedDB backup for user ${t}`);try{const n=await e({type:"BACKUP_INDEXEDDB",backup:{user:t,timestamp:Date.now()}},null,6e4);if(n&&n.success){console.log(`Received IndexedDB backup confirmation from extension for user ${t}`);const o=await e({type:"GET_INDEXEDDB_BACKUP",user:t},null,3e4);if(o&&o.success&&o.data){console.log(`Retrieved IndexedDB backup data from extension for user ${t}`);const d=s.folder("indexeddb"),u=o.data;if(d&&u){if(d.file("indexeddb-data.json",JSON.stringify(u,null,2)),typeof u=="object"&&u!==null)for(const[x,a]of Object.entries(u)){if(!a)continue;const k=d.folder(x);if(k){const j=a==null?void 0:a.version,I=(a==null?void 0:a.objectStores)||[];if(k.file("db-info.json",JSON.stringify({name:x,version:j,objectStores:I},null,2)),a!=null&&a.stores){const h=k.folder("stores");if(h)for(const[B,D]of Object.entries(a.stores))D&&h.file(`${B}.json`,JSON.stringify(D,null,2))}}}c=!0,console.log("Successfully added IndexedDB data to the backup")}}else console.warn("Failed to retrieve IndexedDB backup data from extension:",(o==null?void 0:o.error)||"No data returned")}else console.warn("Failed to create IndexedDB backup with extension:",(n==null?void 0:n.error)||"No success response")}catch(n){console.error("Error communicating with extension for IndexedDB backup:",n)}}else console.log("Extension not installed, skipping IndexedDB backup")}catch(i){console.error("Error importing extension module:",i)}const m=new Date().toISOString().replace(/[:.]/g,"-"),w=t?`-${t.replace(/[^a-zA-Z0-9]/g,"_")}`:"",O=c?"-full":"";return{blob:await s.generateAsync({type:"blob"}),filename:`mata-keys-backup${w}${O}-${m}.zip`}}catch(l){throw console.error("Error creating backup:",l),l}}function v(t,l){const s=URL.createObjectURL(t),c=document.createElement("a");c.href=s,c.download=l,document.body.appendChild(c),c.click(),URL.revokeObjectURL(s),document.body.removeChild(c)}export{A as createLocalStorageBackup,v as downloadBlob};
