const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-6CtNGf6q.js","assets/index-2NUpRxMy.css"])))=>i.map(i=>d[i]);
import{_ as S,k as h,l as V,m as w}from"./index-6CtNGf6q.js";import{getContactsVaultId as D}from"./contactsVaultService-DTnxTawa.js";import{getPaymentMethodVaultId as T}from"./paymentMethodVaultService-BSfQQN5M.js";const g=["passwords","contacts","payments","payment_history","bank_accounts"];function E(e,a){switch(e){case"passwords":return w(a);case"contacts":return D(a);case"payments":return T(a);case"payment_history":return V(a);case"bank_accounts":return h(a);default:throw new Error(`Unknown vault type: ${e}`)}}async function C(e,a){const _="test-encryption-data-"+Date.now(),o=[],l=[],s={},c=Date.now();localStorage.setItem("vault_test_started","true"),localStorage.setItem("vault_test_timestamp",c.toString());const{encryptData:f,decryptData:p}=await S(async()=>{const{encryptData:t,decryptData:n}=await import("./index-6CtNGf6q.js").then(u=>u.q);return{encryptData:t,decryptData:n}},__vite__mapDeps([0,1])),{getStandardizedStorageKey:r}=await S(async()=>{const{getStandardizedStorageKey:t}=await import("./index-6CtNGf6q.js").then(n=>n.p);return{getStandardizedStorageKey:t}},__vite__mapDeps([0,1]));for(const t of g)try{const n=E(t,e);s[t]={accessible:!1,vaultFound:!1,timestamp:c};const u=r(`vault_${t}_test_attempt`,e);if(localStorage.setItem(u,c.toString()),(await a.getVaults()).find(d=>d.id===n)){s[t].vaultFound=!0;try{const d=await f(_,a.getStorageKey()||"");if(await p(d,a.getStorageKey()||"")===_){o.push(t),s[t].accessible=!0,localStorage.setItem(`vault_${t}_accessible`,"true"),localStorage.setItem(`vault_${t}_verified`,"true");const i=r(`vault_${t}_status`,e);localStorage.setItem(i,"accessible"),console.log(`‚úÖ ${t.toUpperCase()} vault verified successfully`)}else{l.push(t),s[t].accessible=!1,s[t].error="Decryption test failed - data mismatch",localStorage.setItem(`vault_${t}_accessible`,"false"),localStorage.setItem(`vault_${t}_verified`,"false");const i=r(`vault_${t}_status`,e);localStorage.setItem(i,"inaccessible"),console.warn(`‚ùå ${t.toUpperCase()} vault decryption test failed - wrong decryption result`)}}catch(d){l.push(t),s[t].accessible=!1,s[t].error=`Encryption error: ${d}`,localStorage.setItem(`vault_${t}_accessible`,"false"),localStorage.setItem(`vault_${t}_verified`,"false");const I=r(`vault_${t}_status`,e);localStorage.setItem(I,"error"),console.error(`‚ùå ${t.toUpperCase()} vault encryption test failed:`,d)}}else{l.push(t),s[t].accessible=!1,s[t].error="Vault not found",localStorage.setItem(`vault_${t}_accessible`,"false"),localStorage.setItem(`vault_${t}_verified`,"false");const d=r(`vault_${t}_status`,e);localStorage.setItem(d,"missing"),console.warn(`‚ùå ${t.toUpperCase()} vault not found`)}}catch(n){l.push(t),s[t]={accessible:!1,vaultFound:!1,error:`Test error: ${n}`,timestamp:c},localStorage.setItem(`vault_${t}_accessible`,"false"),localStorage.setItem(`vault_${t}_verified`,"false");const u=r(`vault_${t}_status`,e);localStorage.setItem(u,"error"),console.error(`‚ùå Error testing ${t.toUpperCase()} vault:`,n)}return localStorage.setItem("accessible_vault_count",o.length.toString()),localStorage.setItem("total_vault_count",g.length.toString()),localStorage.setItem("vault_test_results",JSON.stringify(s)),localStorage.setItem("vault_test_completed","true"),localStorage.setItem("vault_test_completion_time",Date.now().toString()),console.log(`Vault verification complete: ${o.length}/${g.length} vaults accessible`),console.log("Accessible vaults:",o.join(", ")||"None"),console.log("Failed vaults:",l.join(", ")||"None"),{success:o.length===g.length,accessibleVaults:o,totalVaults:g.length,failedVaults:l,results:s}}function $(){const e=localStorage.getItem("accessible_vault_count");return e?parseInt(e,10):0}function L(e=!1){const a=$(),_=localStorage.getItem("total_vault_count"),o=_?parseInt(_,10):g.length;let l=localStorage.getItem("vault_test_results"),s={};try{l&&(s=JSON.parse(l))}catch(r){console.error("Error parsing vault test results:",r)}let c;if(a===0?c="üîí No vaults accessible":a===o?c="‚úÖ All vaults accessible":c=`‚ö†Ô∏è ${a}/${o} vaults accessible`,!e)return c;let f=`${c}

Vault Status Details:`;for(const r of g){const t=localStorage.getItem(`vault_${r}_accessible`)==="true",n=t?"‚úÖ":"‚ùå",u=s[r]||{},y=u.error?` (Error: ${u.error})`:"";f+=`
${n} ${r.toUpperCase()}: ${t?"Accessible":"Not accessible"}${y}`}const p=localStorage.getItem("vault_test_timestamp");if(p){const r=new Date(parseInt(p,10));f+=`

Last tested: ${r.toLocaleString()}`}return f}async function R(e,a,_,o,l,s="Authentication successful"){if(console.log("Performing complete vault decryption verification before redirect..."),!_)return console.error("Storage key is null, cannot verify vault decryption"),o({title:"Authentication warning",description:"Logged in but vault access could not be verified. Some features may be limited.",variant:"destructive"}),setTimeout(l,3e3),!1;try{const{standardizedDecrypt:c}=await S(async()=>{const{standardizedDecrypt:i}=await import("./index-6CtNGf6q.js").then(m=>m.r);return{standardizedDecrypt:i}},__vite__mapDeps([0,1])),{vault_encrypt_data:f}=await S(async()=>{const{vault_encrypt_data:i}=await import("./index-6CtNGf6q.js").then(m=>m.q);return{vault_encrypt_data:i}},__vite__mapDeps([0,1]));if(!a.isInitialized()||!a.isUnlocked())return console.error("Vault service is not initialized or unlocked"),o({title:"Authentication warning",description:"Logged in but vault system is not properly initialized. Some features may be limited.",variant:"destructive"}),setTimeout(l,3e3),!1;const p=await f("MATA_VERIFICATION_TEST",_),t=await c(p,_,e)==="MATA_VERIFICATION_TEST",n=await C(e,a);console.log("Vault test results:",n);const u=$(),y=g.length,b=t&&u>0,d=t&&u===y,I=L(!0);console.log("=== VAULT VERIFICATION DETAILS ==="),console.log(I),console.log("=================================");for(const i of g){const m=localStorage.getItem(`vault_${i}_accessible`)==="true",A=localStorage.getItem(`vault_${i}_verified`)!==null;let v;A?m?v={status:"success",label:"Accessible",color:"#4CAF50",icon:"‚úÖ"}:v={status:"error",label:"Inaccessible",color:"#F44336",icon:"‚ùå"}:v={status:"pending",label:"Not Verified",color:"#888888",icon:"‚è≥"},console.log(`${v.icon} ${i.toUpperCase()} vault: ${v.label}`),localStorage.setItem(`vault_${i}_ui_status`,JSON.stringify(v))}return localStorage.setItem("vault_verification_result",d||b?"success":"failure"),console.log("Password cleanup skipped to maintain vault access across browser sessions"),localStorage.setItem("passwords_preserved_for_vault_access","true"),localStorage.setItem("vault_access_security_tradeoff","true"),d?(console.log("‚úÖ Decryption verification FULLY successful!"),o({title:"Authentication successful",description:s,variant:"default"}),setTimeout(l,2500),!0):b?(console.log("‚ö†Ô∏è Decryption verification partially successful"),o({title:"Authentication successful",description:s,variant:"default"}),setTimeout(l,2500),!0):(console.error("‚ùå Decryption verification failed"),o({title:"Authentication warning",description:"Logged in but vault access could not be verified. Some features may be limited.",variant:"destructive"}),setTimeout(l,3500),!1)}catch(c){return console.error("Decryption verification failed with error:",c),o({title:"Authentication warning",description:"Logged in but vault system encountered errors. Some features may be limited.",variant:"destructive"}),setTimeout(l,3500),!1}}export{R as verifyVaultDecryptionBeforeRedirect};
