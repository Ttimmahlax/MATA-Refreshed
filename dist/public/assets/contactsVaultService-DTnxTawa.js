const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-6CtNGf6q.js","assets/index-2NUpRxMy.css"])))=>i.map(i=>d[i]);
import{_ as s,v as n,n as u}from"./index-6CtNGf6q.js";const r="contacts";function d(t){return t?u(t,r):""}async function g(t){if(!t)return console.error("Cannot initialize contacts vault without email"),!1;try{console.log(`Initializing contacts vault for ${t}...`);const{setVaultUserContext:e}=await s(async()=>{const{setVaultUserContext:o}=await import("./index-6CtNGf6q.js").then(i=>i.p);return{setVaultUserContext:o}},__vite__mapDeps([0,1]));e(t);const{resetFallbackState:c}=await s(async()=>{const{resetFallbackState:o}=await import("./index-6CtNGf6q.js").then(i=>i.q);return{resetFallbackState:o}},__vite__mapDeps([0,1]));if(c(),console.log("Using standardized WASM-first approach with WebCrypto fallback for vault operations"),n.isInitialized()||(console.log("Vault service not initialized, initializing now..."),await n.initialize()),!n.isUnlocked())return console.warn("Vault service is locked - cannot initialize contacts vault"),!1;const l=await n.getVaults(),a=d(t);return console.log(`Checking for contacts vault: ${a}`),l.some(o=>o.id===a)?(console.log(`Contacts vault already exists: ${a}`),!0):(console.log(`Creating contacts vault for ${t}...`),await n.createNewVault("Contacts",r,a),console.log("Using standardized WASM-first approach with WebCrypto fallback for vault operations"),console.log(`Contacts vault created: ${a} using standardized encryption approach`),!0)}catch(e){return console.error("Error initializing contacts vault:",e),!1}}export{r as CONTACTS_VAULT_TYPE,d as getContactsVaultId,g as initializeContactsVault};
